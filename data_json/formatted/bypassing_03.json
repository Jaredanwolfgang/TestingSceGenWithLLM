{
  "docstring": "\"\"\"\nTITLE: Bypassing 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs a lane change to bypass a slow \nadversary vehicle but cannot return to its original lane because \nthe adversary accelerates. Ego vehicle must then slow down to avoid \ncollision with leading vehicle in new lane.\nSOURCE: NHSTA, #16\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.7, 1.0)\n\nparam ADV_DIST = VerifaiRange(10, 15)\nparam ADV_INIT_SPEED = VerifaiRange(2, 4)\nparam ADV_END_SPEED = 2 * VerifaiRange(7, 10)\nADV_BUFFER_TIME = 5\n\nLEAD_DIST = globalParameters.ADV_DIST + 10\nLEAD_SPEED = globalParameters.EGO_SPEED - 4\n\nBYPASS_DIST = [15, 10]\nSAFE_DIST = 15\nINIT_DIST = 50\nTERM_DIST = 70\nTERM_TIME = 10\n\n",
  "monitors": null,
  "behaviors": "\nbehavior DecelerateBehavior(brake):\n    take SetBrakeAction(brake)\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when (distance to adversary) < BYPASS_DIST[0]:\n        fasterLaneSec = self.laneSection.fasterLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=fasterLaneSec,\n                target_speed=globalParameters.EGO_SPEED)\n        try:\n            do FollowLaneBehavior(\n                    target_speed=globalParameters.EGO_SPEED,\n                    laneToFollow=fasterLaneSec.lane) \\\n                until (distance to adversary) > BYPASS_DIST[1]\n        interrupt when (distance to lead) < SAFE_DIST:\n            try:\n                do DecelerateBehavior(globalParameters.EGO_BRAKE)\n            interrupt when (distance to lead) > SAFE_DIST:\n                do FollowLaneBehavior(target_speed=LEAD_SPEED) for TERM_TIME seconds\n                terminate \n\nbehavior AdversaryBehavior():\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_INIT_SPEED) \\\n        until self.lane is not ego.lane\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_END_SPEED)\n\nbehavior LeadBehavior():\n    fasterLaneSec = self.laneSection.fasterLane\n    do LaneChangeBehavior(\n            laneSectionToSwitch=fasterLaneSec,\n            target_speed=LEAD_SPEED)\n    do FollowLaneBehavior(target_speed=LEAD_SPEED)\n\n",
  "spatial_relations": "\ninitLane = Uniform(*network.lanes)\negoSpawnPt = new OrientedPoint in initLane.centerline\n\n",
  "scenario": "\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary = new Car following roadDirection for globalParameters.ADV_DIST,\n    with blueprint MODEL,\n    with behavior AdversaryBehavior()\n\nlead = new Car following roadDirection for LEAD_DIST,\n    with blueprint MODEL,\n    with behavior LeadBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire (distance from lead to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\nterminate when (distance to egoSpawnPt) > TERM_DIST\n",
  "name": "bypassing_03"
}