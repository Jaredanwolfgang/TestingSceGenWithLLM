{
  "docstring": "\"\"\"\nTITLE: Intersection 10\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego Vehicle waits at 4-way intersection while adversary \nvehicle in adjacent lane passes before performing a lane change to \nbypass a stationary vehicle waiting to make a left turn.\nSOURCE: NHSTA, #16\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_INIT_DIST = VerifaiRange(10, 15)\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nSTAT_INIT_DIST = [0, 5]\n\nADV_INIT_DIST = [15, 20]\nADV_SPEED = 10\n\nBYPASS_DIST = 8\nTERM_DIST = 70\n\n",
  "monitors": null,
  "behaviors": "\nbehavior EgoBehavior():\n    while (distance to adversary) < BYPASS_DIST:\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    rightLaneSec = self.laneSection.laneToRight\n    do LaneChangeBehavior(\n            laneSectionToSwitch=rightLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n    do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\n",
  "spatial_relations": "\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\nstatInitLane = Uniform(*filter(lambda lane: \n    all([sec._laneToRight is not None for sec in lane.sections]),\n    intersection.incomingLanes))\nstatSpawnPt = new OrientedPoint in statInitLane.centerline\n\nadvInitLane = statInitLane.sectionAt(statSpawnPt).laneToRight.lane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n",
  "scenario": "\nstationary = new Car at statSpawnPt,\n    with blueprint MODEL\n\nego = new Car behind stationary by globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=ADV_SPEED, trajectory=advTrajectory)\n\nrequire STAT_INIT_DIST[0] <= (distance from stationary to intersection) <= STAT_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to statSpawnPt) > TERM_DIST\n",
  "name": "intersection_10"
}