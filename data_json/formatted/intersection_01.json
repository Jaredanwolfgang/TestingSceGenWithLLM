{
  "docstring": "\"\"\"\nTITLE: Intersection 01\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle goes straight at 4-way intersection and must \nsuddenly stop to avoid collision when adversary vehicle from opposite \nlane makes a left turn.\nSOURCE: NHSTA, #30\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nparam render = 1\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n",
  "monitors": null,
  "behaviors": "\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n",
  "spatial_relations": "\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        egoManeuver.reverseManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n",
  "scenario": "\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n",
  "name": "intersection_01"
}