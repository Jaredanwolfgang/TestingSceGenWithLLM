{
  "docstring": "\"\"\" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 05.\nEgo-vehicle performs a lane changing to evade a leading vehicle, which is moving too slowly.\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nEGO_SPEED = 10\nSLOW_CAR_SPEED = 6\nEGO_TO_BICYCLE = 10\nDIST_THRESHOLD = 15\n\n",
  "monitors": null,
  "behaviors": "\nbehavior EgoBehavior(leftpath, origpath=[]):\n    laneChangeCompleted = False\n\n    try: \n        do FollowLaneBehavior(EGO_SPEED)\n\n    interrupt when withinDistanceToAnyObjs(self, DIST_THRESHOLD) and not laneChangeCompleted:\n        do LaneChangeBehavior(laneSectionToSwitch=leftpath, target_speed=10)\n        laneChangeCompleted = True\n\nbehavior SlowCarBehavior():\n    do FollowLaneBehavior(SLOW_CAR_SPEED)\n\n",
  "spatial_relations": "\nlaneSecsWithRightLane = []\nfor lane in network.lanes:\n    for laneSec in lane.sections:\n        if laneSec._laneToRight != None:\n            laneSecsWithRightLane.append(laneSec)\n\nassert len(laneSecsWithRightLane) > 0, \\\n    'No lane sections with adjacent left lane in network.'\n\ninitLaneSec = Uniform(*laneSecsWithRightLane)\nrightLane = initLaneSec._laneToRight\n\n",
  "scenario": "\nspawnPt = new OrientedPoint on initLaneSec.centerline\n\nego = new Car at spawnPt,\n    with behavior EgoBehavior(rightLane, [initLaneSec])\n\ncyclist = new Car following roadDirection from ego for EGO_TO_BICYCLE,\n    with behavior SlowCarBehavior()\n\nrequire (distance from ego to intersection) > 10\nrequire (distance from cyclist to intersection) > 10",
  "name": "carlaChallenge5"
}