{
  "docstring": "\"\"\" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 09.\nEgo-vehicle is performing a right turn at an intersection, yielding to crossing traffic.\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(10, 15) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(15, 20) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n",
  "monitors": null,
  "behaviors": "\nbehavior CrossingCarBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory = trajectory)\n    terminate\n\nbehavior EgoBehavior(trajectory):\n    try :\n        do FollowTrajectoryBehavior(trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n",
  "spatial_relations": "\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nstraight_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_rightTurn_maneuvers = filter(lambda i: i.type == ManeuverType.RIGHT_TURN, straight_maneuver.conflictingManeuvers)\nego_rightTurn_maneuver = Uniform(*conflicting_rightTurn_maneuvers)\nego_startLane = ego_rightTurn_maneuver.startLane\nego_trajectory = [ego_rightTurn_maneuver.startLane, ego_rightTurn_maneuver.connectingLane, \\\n                                ego_rightTurn_maneuver.endLane]\n\n",
  "scenario": "\nspwPt = startLane.centerline[-1]\ncsm_spwPt = ego_startLane.centerline[-1]\n\ncrossing_car = new Car following roadDirection from spwPt for DISTANCE_TO_INTERSECTION1,\n                with behavior CrossingCarBehavior(trajectory = straight_trajectory)\n\nego = new Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n                with behavior EgoBehavior(ego_trajectory)\n",
  "name": "carlaChallenge9"
}