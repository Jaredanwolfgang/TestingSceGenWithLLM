{
  "docstring": "\"\"\" Scenario Description\nBased on CARLA Challenge Scenario 6: https://carlachallenge.org/challenge/nhtsa/\nEgo-vehicle must go around a blocking object\nusing the opposite lane, yielding to oncoming traffic.\n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../assets/maps/CARLA/Town07.xodr')\nparam carla_map = 'Town07'\nmodel scenic.simulators.carla.model\n\n\n",
  "constants": "\nONCOMING_THROTTLE = 0.6\nEGO_SPEED = 7\nONCOMING_CAR_SPEED = 10\nDIST_THRESHOLD = 13\nYIELD_THRESHOLD = 5\nBLOCKING_CAR_DIST = Range(15, 20)\nBREAK_INTENSITY = 0.8\nBYPASS_DIST = 5\nDIST_BTW_BLOCKING_ONCOMING_CARS = 10\nDIST_TO_INTERSECTION = 15\n\n",
  "monitors": null,
  "behaviors": "\nbehavior EgoBehavior(path):\n    current_lane = network.laneAt(self)\n    laneChangeCompleted = False\n    bypassed = False\n\n    try:\n        do FollowLaneBehavior(EGO_SPEED, laneToFollow=current_lane)\n\n    interrupt when (distance to blockingCar) < DIST_THRESHOLD and not laneChangeCompleted:\n        if ego can see oncomingCar:\n            take SetBrakeAction(BREAK_INTENSITY)\n        elif (distance to oncomingCar) > YIELD_THRESHOLD:\n            do LaneChangeBehavior(path, is_oppositeTraffic=True, target_speed=EGO_SPEED)\n            do FollowLaneBehavior(EGO_SPEED, is_oppositeTraffic=True) until (distance to blockingCar) > BYPASS_DIST\n            laneChangeCompleted = True\n        else:\n            wait\n\n    interrupt when (blockingCar can see ego) and (distance to blockingCar) > BYPASS_DIST and not bypassed:\n        current_laneSection = network.laneSectionAt(self)\n        rightLaneSec = current_laneSection._laneToLeft\n        do LaneChangeBehavior(rightLaneSec, is_oppositeTraffic=False, target_speed=EGO_SPEED)\n        bypassed = True\n\n\nbehavior OncomingCarBehavior(path = []):\n    do FollowLaneBehavior(ONCOMING_CAR_SPEED)\n\n",
  "spatial_relations": "\nlaneSecsWithLeftLane = []\nfor lane in network.lanes:\n    for laneSec in lane.sections:\n        if laneSec._laneToLeft is not None:\n            if laneSec._laneToLeft.isForward is not laneSec.isForward:\n                laneSecsWithLeftLane.append(laneSec)\n\nassert len(laneSecsWithLeftLane) > 0, \\\n    'No lane sections with adjacent left lane with opposing \\\n    traffic direction in network.'\n\ninitLaneSec = Uniform(*laneSecsWithLeftLane)\nleftLaneSec = initLaneSec._laneToLeft\n\n",
  "scenario": "\nspawnPt = new OrientedPoint on initLaneSec.centerline\noncomingCar = new Car on leftLaneSec.centerline,\n    with behavior OncomingCarBehavior()\n\nego = new Car at spawnPt,\n    with behavior EgoBehavior(leftLaneSec)\n    \nblockingCar = new Car following roadDirection from ego for BLOCKING_CAR_DIST,\n                with viewAngle 90 deg\n\nrequire blockingCar can see oncomingCar\nrequire (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS\nrequire (distance from blockingCar to intersection) > DIST_TO_INTERSECTION",
  "name": "carlaChallenge6"
}