{
  "docstring": "\"\"\" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 07.\nEgo-vehicle is going straight at an intersection but a crossing vehicle \nruns a red light, forcing the ego-vehicle to perform a collision avoidance maneuver.\nNote: The traffic light control is not implemented yet, but it will soon be. \n\"\"\"",
  "has_docstring": true,
  "map_and_model": "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n",
  "constants": "\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(15, 20) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(10, 15) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n",
  "monitors": null,
  "behaviors": "\nbehavior CrossingCarBehavior(trajectory):\n    while True:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n\nbehavior EgoBehavior(trajectory):\n    \n    try:\n        do FollowTrajectoryBehavior(trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n",
  "spatial_relations": "\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nego_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_straight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, straight_maneuver.conflictingManeuvers)\ncsm = Uniform(*conflicting_straight_maneuvers)\ncrossing_startLane = csm.startLane\ncrossing_car_trajectory = [csm.startLane, csm.connectingLane, csm.endLane]\n\n",
  "scenario": "\nego_spwPt = startLane.centerline[-1]\ncsm_spwPt = crossing_startLane.centerline[-1]\n\nego = new Car following roadDirection from ego_spwPt for DISTANCE_TO_INTERSECTION1,\n        with behavior EgoBehavior(trajectory = ego_trajectory)\n\ncrossing_car = new Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n                with behavior CrossingCarBehavior(crossing_car_trajectory)\n\n\n\"\"\"Note: Traffic light is currently not controlled but this functionality will be added very soon \"\"\"",
  "name": "carlaChallenge7"
}