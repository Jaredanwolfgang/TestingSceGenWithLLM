[{'docstring': '"""\nTITLE: Intersection 05\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a right turn at 4-way intersection \nwhile adversary vehicle from opposite lane makes a left turn.\nSOURCE: NHSTA, #25\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [5, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        Uniform(*filter(lambda m: \n            m.type is ManeuverType.STRAIGHT, \n            egoInitLane.maneuvers)\n        ).reverseManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 10.\nCrossing negotiation at an unsignalized intersection.\nThe ego-vehicle needs to negotiate with other vehicles to cross an unsignalized intersection. In\nthis situation it is assumed that the first to enter the intersection has priority.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n', 'monitors': None, 'behaviors': '\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\n\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n', 'spatial_relations': '\n\nfourWayIntersection = filter(lambda i: i.is4Way and not i.isSignalized, network.intersections)\n\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\n\nego_maneuver = Uniform(*ego_start_lane.maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\n\nadv_maneuver = Uniform(*ego_maneuver.conflictingManeuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\nadv_start_lane = adv_maneuver.startLane\n\n', 'scenario': '\nego_spawn_pt = new OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = new OrientedPoint in adv_maneuver.startLane.centerline\n\nego = new Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\n\nadversary = new Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\n\nrequire 20 <= (distance to intersec) <= 25\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 01.\nControl loss without previous action.\nThe ego-vehicle loses control due to bad conditions on the road and it must recover, coming back to\nits original lane.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\n\n', 'monitors': None, 'behaviors': None, 'spatial_relations': '\n\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nstart = new OrientedPoint on lane.centerline\nego = new Car at start,\n    with blueprint EGO_MODEL,\n    with rolename "hero"\n\ndebris1 = new Debris following roadDirection for Range(10, 20)\ndebris2 = new Debris following roadDirection from debris1 for Range(5, 10)\ndebris3 = new Debris following roadDirection from debris2 for Range(5, 10)\n\nrequire (distance to intersection) > 50\nterminate when (distance from debris3 to ego) > 10 and (distance to start) > 50\n'}, {'docstring': '"""\nTITLE: Bypassing 01\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs a lane change to bypass a slow \nadversary vehicle before returning to its original lane.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\n\nparam ADV_DIST = VerifaiRange(10, 25)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n        fasterLaneSec = self.laneSection.fasterLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=fasterLaneSec,\n                target_speed=globalParameters.EGO_SPEED)\n        do FollowLaneBehavior(\n                target_speed=globalParameters.EGO_SPEED,\n                laneToFollow=fasterLaneSec.lane) \\\n            until (distance to adversary) > BYPASS_DIST[1]\n        slowerLaneSec = self.laneSection.slowerLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=slowerLaneSec,\n                target_speed=globalParameters.EGO_SPEED)\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED) for TERM_TIME seconds\n        terminate \n\n', 'spatial_relations': '\ninitLane = Uniform(*network.lanes)\negoSpawnPt = new OrientedPoint in initLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary = new Car following roadDirection for globalParameters.ADV_DIST,\n    with blueprint MODEL,\n    with behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 03 (dynamic).\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nparam render = 0\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nPEDESTRIAN_MIN_SPEED = 0.5\nTHRESHOLD = 17\n\n', 'monitors': None, 'behaviors': '\nbehavior PedestrianBehavior(min_speed=1, threshold=10):\n    while (ego.speed <= 0.1):\n        wait\n\n    do CrossingBehavior(ego, min_speed, threshold)\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nspot = new OrientedPoint on lane.centerline\nvending_spot = new OrientedPoint following roadDirection from spot for -3\n\npedestrian = new Pedestrian right of spot by 3,\n    with heading 90 deg relative to spot.heading,\n    with regionContainedIn None,\n    with behavior PedestrianBehavior(PEDESTRIAN_MIN_SPEED, THRESHOLD)\n\nvending_machine = new VendingMachine right of vending_spot by 3,\n    with heading -90 deg relative to vending_spot.heading,\n    with regionContainedIn None\n\nego = new Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with rolename "hero"\n\nrequire (distance to intersection) > 50\nrequire always (ego.laneSection._slowerLane is None)\nterminate when (distance to spot) > 50\n'}, {'docstring': '"""\nTITLE: Intersection 04\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle either goes straight or makes a left turn at \n4-way intersection and must suddenly stop to avoid collision when \nadversary vehicle from lateral lane makes a left turn.\nSOURCE: NHSTA, #28 #29\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n        m.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n        egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\n            .conflictingManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 07.\nCrossing traffic running a red light at an intersection.\nThe ego-vehicle is going straight at an intersection but a crossing vehicle runs a red light,\nforcing the ego-vehicle to avoid the collision.\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nparam render = '0'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n', 'monitors': '\nmonitor TrafficLights():\n    freezeTrafficLights()\n    while True:\n        if withinDistanceToTrafficLight(ego, 100):\n            setClosestTrafficLightStatus(ego, "green")\n        if withinDistanceToTrafficLight(adversary, 100):\n            setClosestTrafficLightStatus(adversary, "red")\n        wait\nrequire monitor TrafficLights()\n\n', 'behaviors': '\nbehavior AdversaryBehavior(trajectory):\n    while (ego.speed < 0.1):\n        wait\n    do FollowTrajectoryBehavior(trajectory=trajectory)\n\n', 'spatial_relations': '\nfourWayIntersection = filter(lambda i: i.is4Way and i.isSignalized, network.intersections)\n\nintersec = Uniform(*fourWayIntersection)\nego_startLane = Uniform(*intersec.incomingLanes)\n\nego_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, ego_startLane.maneuvers)\nego_maneuver = Uniform(*ego_maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\n\nadv_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, ego_maneuver.conflictingManeuvers)\nadv_maneuver = Uniform(*adv_maneuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\n\n', 'scenario': '\nego_spawn_pt = new OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = new OrientedPoint in adv_maneuver.startLane.centerline\n\nego = new Car at ego_spawn_pt,\n    with rolename "hero"\n\nadversary = new Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\n\nrequire 15 <= (distance to intersec) <= 20\nrequire 10 <= (distance from adversary to intersec) <= 15\nterminate when (distance to ego_spawn_pt) > 70\n'}, {'docstring': '"""\nTITLE: Bypassing 05\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs multiple lane changes to bypass three \nslow adversary vehicles.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV3_DIST = globalParameters.ADV2_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV3_DIST + 15\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when ((distance to adversary_1) < BYPASS_DIST\n                 or (distance to adversary_3) < BYPASS_DIST):\n        newLaneSec = self.laneSection.laneToRight\n        do LaneChangeBehavior(\n            laneSectionToSwitch=newLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n    interrupt when (distance to adversary_2) < BYPASS_DIST:\n        newLaneSec = self.laneSection.laneToLeft\n        do LaneChangeBehavior(\n            laneSectionToSwitch=newLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n\nbehavior Adversary2Behavior():\n    rightLaneSec = self.laneSection.laneToRight\n    do LaneChangeBehavior(\n        laneSectionToSwitch=rightLaneSec,\n        target_speed=globalParameters.ADV_SPEED)\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\n', 'spatial_relations': '\ninitLane = Uniform(*filter(lambda lane:\n    all([sec._laneToRight is not None for sec in lane.sections]),\n    network.lanes))\negoSpawnPt = new OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary_1 = new Car following roadDirection for globalParameters.ADV1_DIST,\n    with blueprint MODEL,\n    with behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nadversary_2 = new Car following roadDirection for globalParameters.ADV2_DIST,\n    with blueprint MODEL,\n    with behavior Adversary2Behavior()\n\nadversary_3 = new Car following roadDirection for globalParameters.ADV3_DIST,\n    with blueprint MODEL,\n    with behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nrequire (distance from adversary_3 to intersection) > INIT_DIST\nterminate when (distance to adversary_3) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Intersection 09\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a right turn at 3-way intersection \nwhile adversary vehicle from lateral lane goes straight.\nSOURCE: NHSTA, #28 #29\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nBased on CARLA Challenge Scenario 6: https://carlachallenge.org/challenge/nhtsa/\nEgo-vehicle must go around a blocking object\nusing the opposite lane, yielding to oncoming traffic.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town07.xodr')\nparam carla_map = 'Town07'\nmodel scenic.simulators.carla.model\n\n\n", 'constants': '\nONCOMING_THROTTLE = 0.6\nEGO_SPEED = 7\nONCOMING_CAR_SPEED = 10\nDIST_THRESHOLD = 13\nYIELD_THRESHOLD = 5\nBLOCKING_CAR_DIST = Range(15, 20)\nBREAK_INTENSITY = 0.8\nBYPASS_DIST = 5\nDIST_BTW_BLOCKING_ONCOMING_CARS = 10\nDIST_TO_INTERSECTION = 15\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(path):\n    current_lane = network.laneAt(self)\n    laneChangeCompleted = False\n    bypassed = False\n\n    try:\n        do FollowLaneBehavior(EGO_SPEED, laneToFollow=current_lane)\n\n    interrupt when (distance to blockingCar) < DIST_THRESHOLD and not laneChangeCompleted:\n        if ego can see oncomingCar:\n            take SetBrakeAction(BREAK_INTENSITY)\n        elif (distance to oncomingCar) > YIELD_THRESHOLD:\n            do LaneChangeBehavior(path, is_oppositeTraffic=True, target_speed=EGO_SPEED)\n            do FollowLaneBehavior(EGO_SPEED, is_oppositeTraffic=True) until (distance to blockingCar) > BYPASS_DIST\n            laneChangeCompleted = True\n        else:\n            wait\n\n    interrupt when (blockingCar can see ego) and (distance to blockingCar) > BYPASS_DIST and not bypassed:\n        current_laneSection = network.laneSectionAt(self)\n        rightLaneSec = current_laneSection._laneToLeft\n        do LaneChangeBehavior(rightLaneSec, is_oppositeTraffic=False, target_speed=EGO_SPEED)\n        bypassed = True\n\n\nbehavior OncomingCarBehavior(path = []):\n    do FollowLaneBehavior(ONCOMING_CAR_SPEED)\n\n', 'spatial_relations': "\nlaneSecsWithLeftLane = []\nfor lane in network.lanes:\n    for laneSec in lane.sections:\n        if laneSec._laneToLeft is not None:\n            if laneSec._laneToLeft.isForward is not laneSec.isForward:\n                laneSecsWithLeftLane.append(laneSec)\n\nassert len(laneSecsWithLeftLane) > 0, \\\n    'No lane sections with adjacent left lane with opposing \\\n    traffic direction in network.'\n\ninitLaneSec = Uniform(*laneSecsWithLeftLane)\nleftLaneSec = initLaneSec._laneToLeft\n\n", 'scenario': '\nspawnPt = new OrientedPoint on initLaneSec.centerline\noncomingCar = new Car on leftLaneSec.centerline,\n    with behavior OncomingCarBehavior()\n\nego = new Car at spawnPt,\n    with behavior EgoBehavior(leftLaneSec)\n    \nblockingCar = new Car following roadDirection from ego for BLOCKING_CAR_DIST,\n                with viewAngle 90 deg\n\nrequire blockingCar can see oncomingCar\nrequire (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS\nrequire (distance from blockingCar to intersection) > DIST_TO_INTERSECTION'}, {'docstring': '""" Scenario Description\nTraffic Scenario 03 (static).\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\n\nBRAKE_ACTION = 1.0\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyObjs(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nspawnPt = new OrientedPoint on lane.centerline\n\nobstacle = new Trash at spawnPt offset by Range(1, -1) @ 0\n\nego = new Car following roadDirection from spawnPt for Range(-50, -30),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 75\nterminate when ego.speed < 0.1 and (distance to obstacle) < 15\n'}, {'docstring': '"""\nTITLE: Pedestrian 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a left turn at an intersection and must \nsuddenly stop to avoid collision when pedestrian crosses the crosswalk.\nSOURCE: Carla Challenge, #04\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = new Pedestrian right of tempSpawnPt by 3,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 05.\nEgo-vehicle performs a lane changing to evade a leading vehicle, which is moving too slowly.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_SPEED = 10\nSLOW_CAR_SPEED = 6\nEGO_TO_BICYCLE = 10\nDIST_THRESHOLD = 15\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(leftpath, origpath=[]):\n    laneChangeCompleted = False\n\n    try: \n        do FollowLaneBehavior(EGO_SPEED)\n\n    interrupt when withinDistanceToAnyObjs(self, DIST_THRESHOLD) and not laneChangeCompleted:\n        do LaneChangeBehavior(laneSectionToSwitch=leftpath, target_speed=10)\n        laneChangeCompleted = True\n\nbehavior SlowCarBehavior():\n    do FollowLaneBehavior(SLOW_CAR_SPEED)\n\n', 'spatial_relations': "\nlaneSecsWithRightLane = []\nfor lane in network.lanes:\n    for laneSec in lane.sections:\n        if laneSec._laneToRight != None:\n            laneSecsWithRightLane.append(laneSec)\n\nassert len(laneSecsWithRightLane) > 0, \\\n    'No lane sections with adjacent left lane in network.'\n\ninitLaneSec = Uniform(*laneSecsWithRightLane)\nrightLane = initLaneSec._laneToRight\n\n", 'scenario': '\nspawnPt = new OrientedPoint on initLaneSec.centerline\n\nego = new Car at spawnPt,\n    with behavior EgoBehavior(rightLane, [initLaneSec])\n\ncyclist = new Car following roadDirection from ego for EGO_TO_BICYCLE,\n    with behavior SlowCarBehavior()\n\nrequire (distance from ego to intersection) > 10\nrequire (distance from cyclist to intersection) > 10'}, {'docstring': '"""\nTITLE: Intersection 10\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego Vehicle waits at 4-way intersection while adversary \nvehicle in adjacent lane passes before performing a lane change to \nbypass a stationary vehicle waiting to make a left turn.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_INIT_DIST = VerifaiRange(10, 15)\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nSTAT_INIT_DIST = [0, 5]\n\nADV_INIT_DIST = [15, 20]\nADV_SPEED = 10\n\nBYPASS_DIST = 8\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    while (distance to adversary) < BYPASS_DIST:\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    rightLaneSec = self.laneSection.laneToRight\n    do LaneChangeBehavior(\n            laneSectionToSwitch=rightLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n    do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\nstatInitLane = Uniform(*filter(lambda lane: \n    all([sec._laneToRight is not None for sec in lane.sections]),\n    intersection.incomingLanes))\nstatSpawnPt = new OrientedPoint in statInitLane.centerline\n\nadvInitLane = statInitLane.sectionAt(statSpawnPt).laneToRight.lane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nstationary = new Car at statSpawnPt,\n    with blueprint MODEL\n\nego = new Car behind stationary by globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=ADV_SPEED, trajectory=advTrajectory)\n\nrequire STAT_INIT_DIST[0] <= (distance from stationary to intersection) <= STAT_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to statSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 09.\nEgo-vehicle is performing a right turn at an intersection, yielding to crossing traffic.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(10, 15) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(15, 20) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n', 'monitors': None, 'behaviors': '\nbehavior CrossingCarBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory = trajectory)\n    terminate\n\nbehavior EgoBehavior(trajectory):\n    try :\n        do FollowTrajectoryBehavior(trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n', 'spatial_relations': '\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nstraight_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_rightTurn_maneuvers = filter(lambda i: i.type == ManeuverType.RIGHT_TURN, straight_maneuver.conflictingManeuvers)\nego_rightTurn_maneuver = Uniform(*conflicting_rightTurn_maneuvers)\nego_startLane = ego_rightTurn_maneuver.startLane\nego_trajectory = [ego_rightTurn_maneuver.startLane, ego_rightTurn_maneuver.connectingLane, \\\n                                ego_rightTurn_maneuver.endLane]\n\n', 'scenario': '\nspwPt = startLane.centerline[-1]\ncsm_spwPt = ego_startLane.centerline[-1]\n\ncrossing_car = new Car following roadDirection from spwPt for DISTANCE_TO_INTERSECTION1,\n                with behavior CrossingCarBehavior(trajectory = straight_trajectory)\n\nego = new Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n                with behavior EgoBehavior(ego_trajectory)\n'}, {'docstring': '""" Scenario Description\nBackground Activity\nThe simulation is filled with vehicles that freely roam around the town.\nThis simulates normal driving conditions, without any abnormal behaviors\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n    interrupt when withinDistanceToObjsInLane(self, 10):\n        take SetBrakeAction(1.0)\n\n', 'spatial_relations': '\nbackground_vehicles = []\nfor _ in range(25):\n    lane = Uniform(*network.lanes)\n    spot = new OrientedPoint on lane.centerline\n    background_car = new Car at spot,\n        with behavior AutopilotBehavior()\n    background_vehicles.append(background_car)\n\nbackground_walkers = []\nfor _ in range(10):\n    sideWalk = Uniform(*network.sidewalks)\n    background_walker = new Pedestrian in sideWalk,\n        with behavior WalkBehavior()\n    background_walkers.append(background_walker)\n\n', 'scenario': '\nego = new Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 01.\nControl loss without previous action.\nThe ego-vehicle loses control due to bad conditions on the road and it must recover, coming back to\nits original lane.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(speed=10):\n    do FollowLaneBehavior(speed)\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nstart = new OrientedPoint on lane.centerline\nego = new Car at start,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\ndebris1 = new Debris following roadDirection for Range(10, 20)\ndebris2 = new Debris following roadDirection from debris1 for Range(5, 10)\ndebris3 = new Debris following roadDirection from debris2 for Range(5, 10)\n\nrequire (distance to intersection) > 50\nterminate when (distance from debris3 to ego) > 10 and (distance to start) > 50\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 04.\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nparam render = '0'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nBICYCLE_MIN_SPEED = 1\nTHRESHOLD = 15\n\n', 'monitors': None, 'behaviors': '\nbehavior BicycleBehavior(speed=3, threshold=15):\n    do CrossingBehavior(ego, speed, threshold)\n\n', 'spatial_relations': '\nintersec = Uniform(*network.intersections)\nstartLane = Uniform(*intersec.incomingLanes)\nmaneuver = Uniform(*startLane.maneuvers)\nego_trajectory = [maneuver.startLane, maneuver.connectingLane, maneuver.endLane]\n\n', 'scenario': "\nspot = new OrientedPoint in maneuver.startLane.centerline\nego = new Car at spot,\n    with blueprint EGO_MODEL,\n    with rolename 'hero'\n\nspotBicycle = new OrientedPoint in maneuver.endLane.centerline,\n    facing roadDirection\nbicycle = new Bicycle at spotBicycle offset by 3.5@0,\n    with heading 90 deg relative to spotBicycle.heading,\n    with behavior BicycleBehavior(BICYCLE_MIN_SPEED, THRESHOLD),\n    with regionContainedIn None\n\nrequire 10 <= (distance to intersec) <= 25\nrequire 5 <= (distance from bicycle to intersec) <= 10\nterminate when (distance to spot) > 50\n"}, {'docstring': '"""\nTITLE: Pedestrian 01\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle must suddenly stop to avoid collision when \npedestrian crosses the road unexpectedly.\nSOURCE: Carla Challenge, #03\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\nspawnPt = new OrientedPoint on lane.centerline\n\n', 'scenario': '\nego = new Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = new Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire (distance to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nVoyage OAS Scenario Unique ID: 2-2-XX-CF-STR-CAR:Pa>E:03\nThe lead car suddenly stops and then resumes moving forward\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.domains.driving.model\n\n", 'constants': '\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 10\nINITIAL_DISTANCE_APART = -1 * Uniform(5, 10)\nSTEPS_PER_SEC = 10\n\n', 'monitors': None, 'behaviors': '\nbehavior LeadCarBehavior():\n    try:\n        do FollowLaneBehavior()\n    interrupt when 5 * STEPS_PER_SEC < simulation().currentTime and simulation().currentTime < 6 * STEPS_PER_SEC:\n        take SetBrakeAction(MAX_BREAK_THRESHOLD)\n\nbehavior CollisionAvoidance():\n    while withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(MAX_BREAK_THRESHOLD)\n\n\nbehavior FollowLeadCarBehavior():\n    try: \n        do FollowLaneBehavior()\n\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        do CollisionAvoidance()\n\n', 'spatial_relations': '\nroads = network.roads\nselect_road = Uniform(*roads)\nselect_lane = Uniform(*select_road.lanes)\n\n', 'scenario': '\nother = new Car on select_lane.centerline,\n        with behavior LeadCarBehavior()\n\nego = new Car following roadDirection from other for INITIAL_DISTANCE_APART,\n        with behavior FollowLeadCarBehavior()'}, {'docstring': '"""\nTITLE: Intersection 07\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a left turn at 3-way intersection and \nmust suddenly stop to avoid collision when adversary vehicle from \nlateral lane continues straight.\nSOURCE: NHSTA, #30\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.conflictingManeuvers))\nadvInitLane = advManeuver.startLane\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Intersection 01\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle goes straight at 4-way intersection and must \nsuddenly stop to avoid collision when adversary vehicle from opposite \nlane makes a left turn.\nSOURCE: NHSTA, #30\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nparam render = 1\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        egoManeuver.reverseManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Bypassing 02\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Adversary vehicle performs a lane change to bypass the \nslow ego vehicle before returning to its original lane.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(2, 4)\n\nparam ADV_DIST = VerifaiRange(-25, -10)\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nBYPASS_DIST = [15, 10]\nINIT_DIST = 50\nTERM_TIME = 5\n\n", 'monitors': None, 'behaviors': '\nbehavior AdversaryBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n    interrupt when withinDistanceToAnyObjs(self, BYPASS_DIST[0]):\n        fasterLaneSec = self.laneSection.fasterLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=fasterLaneSec,\n                target_speed=globalParameters.ADV_SPEED)\n        do FollowLaneBehavior(\n                target_speed=globalParameters.ADV_SPEED,\n                laneToFollow=fasterLaneSec.lane) \\\n            until (distance to adversary) > BYPASS_DIST[1]\n        slowerLaneSec = self.laneSection.slowerLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=slowerLaneSec,\n                target_speed=globalParameters.ADV_SPEED)\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED) for TERM_TIME seconds\n        terminate \n\n', 'spatial_relations': '\ninitLane = Uniform(*network.lanes)\negoSpawnPt = new OrientedPoint in initLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n\nadversary = new Car following roadDirection for globalParameters.ADV_DIST,\n    with blueprint MODEL,\n    with behavior AdversaryBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire always (ego.laneSection._fasterLane is not None)\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 08.\nUnprotected left turn at intersection with oncoming traffic.\nThe ego-vehicle is performing an unprotected left turn at an intersection, yielding to oncoming\ntraffic.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n', 'monitors': '\nmonitor TrafficLights():\n    freezeTrafficLights()\n    while True:\n        if withinDistanceToTrafficLight(ego, 100):\n            setClosestTrafficLightStatus(ego, "green")\n        if withinDistanceToTrafficLight(adversary, 100):\n            setClosestTrafficLightStatus(adversary, "green")\n        wait\nrequire monitor TrafficLights()\n\n', 'behaviors': '\nbehavior AdversaryBehavior(trajectory):\n    do FollowTrajectoryBehavior(trajectory=trajectory)\n\nbehavior EgoBehavior(speed, trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=speed, trajectory=trajectory)\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n', 'spatial_relations': '\nfourWayIntersection = filter(lambda i: i.is4Way and i.isSignalized, network.intersections)\n\nintersec = Uniform(*fourWayIntersection)\nego_start_lane = Uniform(*intersec.incomingLanes)\n\nego_maneuvers = filter(lambda i: i.type == ManeuverType.LEFT_TURN, ego_start_lane.maneuvers)\nego_maneuver = Uniform(*ego_maneuvers)\nego_trajectory = [ego_maneuver.startLane, ego_maneuver.connectingLane, ego_maneuver.endLane]\n\nego_start_section = ego_maneuver.startLane.sections[-1]\n\nadv_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, ego_maneuver.conflictingManeuvers)\nadv_maneuver = Uniform(*adv_maneuvers)\nadv_trajectory = [adv_maneuver.startLane, adv_maneuver.connectingLane, adv_maneuver.endLane]\n\nadv_start_lane = adv_maneuver.startLane\nadv_end_section = adv_maneuver.endLane.sections[0]\n\n', 'scenario': '\nego_spawn_pt = new OrientedPoint in ego_maneuver.startLane.centerline\nadv_spawn_pt = new OrientedPoint in adv_maneuver.startLane.centerline\n\nego = new Car at ego_spawn_pt,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED, ego_trajectory)\n\nadversary = new Car at adv_spawn_pt,\n    with behavior AdversaryBehavior(adv_trajectory)\n\nrequire (ego_start_section.laneToLeft == adv_end_section)  # make sure the ego and adversary are spawned in opposite lanes\nrequire 25 <= (distance to intersec) <= 30\nrequire 15 <= (distance from adversary to intersec) <= 20\nterminate when (distance to ego_spawn_pt) > 70\n'}, {'docstring': '"""\nTITLE: Pedestrian 02\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Both ego and adversary vehicles must suddenly stop to avoid \ncollision when pedestrian crosses the road unexpectedly.\nSOURCE: Carla Challenge, #03\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_INIT_DIST = VerifaiRange(-30, -20)\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nparam ADV_INIT_DIST = VerifaiRange(40, 50)\nparam ADV_SPEED = VerifaiRange(7, 10)\nADV_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nBUFFER_DIST = 75\nCRASH_DIST = 5\nTERM_DIST = 50\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\nbehavior AdvBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n    interrupt when (withinDistanceToObjsInLane(self, globalParameters.SAFETY_DIST) or (distance from adv to ped) < 10) and (ped in network.drivableRegion):\n        take SetBrakeAction(ADV_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nroad = Uniform(*filter(lambda r: len(r.forwardLanes.lanes) == len(r.backwardLanes.lanes) == 1, network.roads))\negoLane = Uniform(road.forwardLanes.lanes)[0]\nspawnPt = new OrientedPoint on egoLane.centerline\nadvSpawnPt = new OrientedPoint following roadDirection from spawnPt for globalParameters.ADV_INIT_DIST\n\n', 'scenario': '\nego = new Car following roadDirection from spawnPt for globalParameters.EGO_INIT_DIST,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nped = new Pedestrian right of spawnPt by 3,\n    with heading 90 deg relative to spawnPt.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nadv = new Car left of advSpawnPt by 3,\n    with blueprint MODEL,\n    with heading 180 deg relative to spawnPt.heading,\n    with behavior AdvBehavior()\n\nrequire (distance from spawnPt to intersection) > BUFFER_DIST\nrequire always (ego.laneSection._slowerLane is None)\nrequire always (ego.laneSection._fasterLane is None)\nrequire always (adv.laneSection._slowerLane is None)\nrequire always (adv.laneSection._fasterLane is None)\nterminate when (distance to spawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nExample scenario of traffic lights management.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehaviorTL(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n    interrupt when withinDistanceToRedYellowTrafficLight(self, 15):\n        take SetBrakeAction(1.0)\n\n', 'spatial_relations': '\n\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nego = new Car on lane.centerline,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehaviorTL(EGO_SPEED)\n\nrequire (distance to intersection) < 50\nrequire (distance to intersection) > 5\n'}, {'docstring': '""" Scenario Description\nBased on 2019 Carla Challenge Traffic Scenario 07.\nEgo-vehicle is going straight at an intersection but a crossing vehicle \nruns a red light, forcing the ego-vehicle to perform a collision avoidance maneuver.\nNote: The traffic light control is not implemented yet, but it will soon be. \n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nDELAY_TIME_1 = 1 # the delay time for ego\nDELAY_TIME_2 = 40 # the delay time for the slow car\nFOLLOWING_DISTANCE = 13 # normally 10, 40 when DELAY_TIME is 25, 50 to prevent collisions\n\nDISTANCE_TO_INTERSECTION1 = Uniform(15, 20) * -1\nDISTANCE_TO_INTERSECTION2 = Uniform(10, 15) * -1\nSAFETY_DISTANCE = 20\nBRAKE_INTENSITY = 1.0\n\n', 'monitors': None, 'behaviors': '\nbehavior CrossingCarBehavior(trajectory):\n    while True:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n\nbehavior EgoBehavior(trajectory):\n    \n    try:\n        do FollowTrajectoryBehavior(trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\n', 'spatial_relations': '\nspawnAreas = []\nfourWayIntersection = filter(lambda i: i.is4Way, network.intersections)\nintersec = Uniform(*fourWayIntersection)\n\nstartLane = Uniform(*intersec.incomingLanes)\nstraight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, startLane.maneuvers)\nstraight_maneuver = Uniform(*straight_maneuvers)\nego_trajectory = [straight_maneuver.startLane, straight_maneuver.connectingLane, straight_maneuver.endLane]\n\nconflicting_straight_maneuvers = filter(lambda i: i.type == ManeuverType.STRAIGHT, straight_maneuver.conflictingManeuvers)\ncsm = Uniform(*conflicting_straight_maneuvers)\ncrossing_startLane = csm.startLane\ncrossing_car_trajectory = [csm.startLane, csm.connectingLane, csm.endLane]\n\n', 'scenario': '\nego_spwPt = startLane.centerline[-1]\ncsm_spwPt = crossing_startLane.centerline[-1]\n\nego = new Car following roadDirection from ego_spwPt for DISTANCE_TO_INTERSECTION1,\n        with behavior EgoBehavior(trajectory = ego_trajectory)\n\ncrossing_car = new Car following roadDirection from csm_spwPt for DISTANCE_TO_INTERSECTION2,\n                with behavior CrossingCarBehavior(crossing_car_trajectory)\n\n\n"""Note: Traffic light is currently not controlled but this functionality will be added very soon """'}, {'docstring': '"""\nTITLE: Intersection 02\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a left turn at 4-way intersection and \nmust suddenly stop to avoid collision when adversary vehicle from \nopposite lane goes straight.\nSOURCE: NHSTA, #30\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\nadvInitLane = Uniform(*intersection.incomingLanes)\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\negoInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        advManeuver.reverseManeuvers)\n    ).startLane\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Intersection 08\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle goes straight at 3-way intersection and must \nsuddenly stop to avoid collision when adversary vehicle makes a left \nturn.\nSOURCE: NHSTA, #30\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 40]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [0, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is3Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        egoManeuver.reverseManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.LEFT_TURN, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Bypassing 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs a lane change to bypass a slow \nadversary vehicle but cannot return to its original lane because \nthe adversary accelerates. Ego vehicle must then slow down to avoid \ncollision with leading vehicle in new lane.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.7, 1.0)\n\nparam ADV_DIST = VerifaiRange(10, 15)\nparam ADV_INIT_SPEED = VerifaiRange(2, 4)\nparam ADV_END_SPEED = 2 * VerifaiRange(7, 10)\nADV_BUFFER_TIME = 5\n\nLEAD_DIST = globalParameters.ADV_DIST + 10\nLEAD_SPEED = globalParameters.EGO_SPEED - 4\n\nBYPASS_DIST = [15, 10]\nSAFE_DIST = 15\nINIT_DIST = 50\nTERM_DIST = 70\nTERM_TIME = 10\n\n", 'monitors': None, 'behaviors': '\nbehavior DecelerateBehavior(brake):\n    take SetBrakeAction(brake)\n\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when (distance to adversary) < BYPASS_DIST[0]:\n        fasterLaneSec = self.laneSection.fasterLane\n        do LaneChangeBehavior(\n                laneSectionToSwitch=fasterLaneSec,\n                target_speed=globalParameters.EGO_SPEED)\n        try:\n            do FollowLaneBehavior(\n                    target_speed=globalParameters.EGO_SPEED,\n                    laneToFollow=fasterLaneSec.lane) \\\n                until (distance to adversary) > BYPASS_DIST[1]\n        interrupt when (distance to lead) < SAFE_DIST:\n            try:\n                do DecelerateBehavior(globalParameters.EGO_BRAKE)\n            interrupt when (distance to lead) > SAFE_DIST:\n                do FollowLaneBehavior(target_speed=LEAD_SPEED) for TERM_TIME seconds\n                terminate \n\nbehavior AdversaryBehavior():\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_INIT_SPEED) \\\n        until self.lane is not ego.lane\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_END_SPEED)\n\nbehavior LeadBehavior():\n    fasterLaneSec = self.laneSection.fasterLane\n    do LaneChangeBehavior(\n            laneSectionToSwitch=fasterLaneSec,\n            target_speed=LEAD_SPEED)\n    do FollowLaneBehavior(target_speed=LEAD_SPEED)\n\n', 'spatial_relations': '\ninitLane = Uniform(*network.lanes)\negoSpawnPt = new OrientedPoint in initLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary = new Car following roadDirection for globalParameters.ADV_DIST,\n    with blueprint MODEL,\n    with behavior AdversaryBehavior()\n\nlead = new Car following roadDirection for LEAD_DIST,\n    with blueprint MODEL,\n    with behavior LeadBehavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary to intersection) > INIT_DIST\nrequire (distance from lead to intersection) > INIT_DIST\nrequire always (adversary.laneSection._fasterLane is not None)\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 03 (dynamic).\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nSAFETY_DISTANCE = 10\nBRAKE_INTENSITY = 1.0\n\nPEDESTRIAN_MIN_SPEED = 1.0\nTHRESHOLD = 20\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(target_speed=speed)\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_INTENSITY)\n\nbehavior PedestrianBehavior(min_speed=1, threshold=10):\n    do CrossingBehavior(ego, min_speed, threshold)\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nspot = new OrientedPoint on lane.centerline\nvending_spot = new OrientedPoint following roadDirection from spot for -3\n\npedestrian = new Pedestrian right of spot by 3,\n    with heading 90 deg relative to spot.heading,\n    with regionContainedIn None,\n    with behavior PedestrianBehavior(PEDESTRIAN_MIN_SPEED, THRESHOLD)\n\nvending_machine = new VendingMachine right of vending_spot by 3,\n    with heading -90 deg relative to vending_spot.heading,\n    with regionContainedIn None\n\nego = new Car following roadDirection from spot for Range(-30, -20),\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 75\nrequire (ego.laneSection._slowerLane is None)\nterminate when (distance to spot) > 50\n'}, {'docstring': '"""\nTITLE: Intersection 03\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle either goes straight or makes a left turn at \n4-way intersection and must suddenly stop to avoid collision when \nadversary vehicle from lateral lane continues straight.\nSOURCE: NHSTA, #28 #29\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [15, 20]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m:\n        m.type in (ManeuverType.STRAIGHT, ManeuverType.LEFT_TURN),\n        egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        Uniform(*filter(lambda m: \n            m.type is ManeuverType.STRAIGHT, \n            egoInitLane.maneuvers)\n        ).conflictingManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 02.\nLongitudinal control after leading vehicle’s brake.\nThe leading vehicle decelerates suddenly due to an obstacle and the ego-vehicle must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nEGO_SPEED = 10\nEGO_BRAKING_THRESHOLD = 12\n\nLEAD_CAR_SPEED = 10\nLEADCAR_BRAKING_THRESHOLD = 10\n\nBRAKE_ACTION = 1.0\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(speed=10):\n    try:\n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyCars(self, EGO_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\nbehavior LeadingCarBehavior(speed=10):\n    try: \n        do FollowLaneBehavior(speed)\n\n    interrupt when withinDistanceToAnyObjs(self, LEADCAR_BRAKING_THRESHOLD):\n        take SetBrakeAction(BRAKE_ACTION)\n\n', 'spatial_relations': '\nlane = Uniform(*network.lanes)\n\n', 'scenario': '\nobstacle = new Trash on lane.centerline\n\nleadCar = new Car following roadDirection from obstacle for Range(-50, -30),\n        with behavior LeadingCarBehavior(LEAD_CAR_SPEED)\n\nego = new Car following roadDirection from leadCar for Range(-15, -10),\n        with blueprint EGO_MODEL,\n        with behavior EgoBehavior(EGO_SPEED)\n\nrequire (distance to intersection) > 80\nterminate when ego.speed < 0.1 and (distance to obstacle) < 30\n'}, {'docstring': '"""\nTITLE: Pedestrian 05\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle goes straight at an intersection and must \nyield when pedestrian crosses the crosswalk.\nSOURCE: Carla Challenge, #04\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion):\n        take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\ntempManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, egoManeuver.reverseManeuvers))\ntempInitLane = tempManeuver.startLane\ntempSpawnPt = tempInitLane.centerline[-1]\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = new Pedestrian right of tempSpawnPt by 3,\n    with heading -90 deg relative to ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nTraffic Scenario 04.\nObstacle avoidance without prior action.\nThe ego-vehicle encounters an obstacle / unexpected entity on the road and must perform an\nemergency brake or an avoidance maneuver.\n"""', 'map_and_model': "\nparam map = localPath('../../assets/maps/CARLA/Town01.xodr')\nparam carla_map = 'Town01'\nmodel scenic.simulators.carla.model\n\n", 'constants': '\nEGO_MODEL = "vehicle.lincoln.mkz_2017"\nBICYCLE_MIN_SPEED = 1.5\nTHRESHOLD = 18\nBRAKE_ACTION = 1.0\nSAFETY_DISTANCE = 10\n\n', 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(trajectory = trajectory)\n\n    interrupt when withinDistanceToObjsInLane(self, SAFETY_DISTANCE):\n        take SetBrakeAction(BRAKE_ACTION)\n\nbehavior BicycleBehavior(speed=3, threshold=15):\n    do CrossingBehavior(ego, speed, threshold)\n\n', 'spatial_relations': '\nintersec = Uniform(*network.intersections)\nstartLane = Uniform(*intersec.incomingLanes)\nmaneuver = Uniform(*startLane.maneuvers)\nego_trajectory = [maneuver.startLane, maneuver.connectingLane, maneuver.endLane]\n\n', 'scenario': '\nspot = new OrientedPoint in maneuver.startLane.centerline\nego = new Car at spot,\n    with blueprint EGO_MODEL,\n    with behavior EgoBehavior(trajectory = ego_trajectory)\n\nspotBicycle = new OrientedPoint in maneuver.endLane.centerline,\n    facing roadDirection\nbicycle = new Bicycle at spotBicycle offset by 3.5@0,\n    with heading 90 deg relative to spotBicycle.heading,\n    with behavior BicycleBehavior(BICYCLE_MIN_SPEED, THRESHOLD),\n    with regionContainedIn None\n\nrequire 10 <= (distance to intersec) <= 15\nrequire 10 <= (distance from bicycle to intersec) <= 15\nterminate when (distance to spot) > 50\n'}, {'docstring': '"""\nTITLE: Pedestrian 04\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a right turn at an intersection and must \nyield when pedestrian crosses the crosswalk.\nSOURCE: Carla Challenge, #04\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nEGO_BRAKE = 1.0\n\nPED_MIN_SPEED = 1.0\nPED_THRESHOLD = 20\n\nparam SAFETY_DIST = VerifaiRange(10, 15)\nCRASH_DIST = 5\nTERM_DIST = 50\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    flag = True\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST) and (ped in network.drivableRegion) and flag:\n        flag = False\n        while withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST + 3):\n            take SetBrakeAction(EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way or i.is3Way, network.intersections))\n\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, intersection.maneuvers))\negoInitLane = egoManeuver.startLane\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\ntempSpawnPt = egoInitLane.centerline[-1]\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nped = new Pedestrian right of tempSpawnPt by 5,\n    with heading ego.heading,\n    with regionContainedIn None,\n    with behavior CrossingBehavior(ego, PED_MIN_SPEED, PED_THRESHOLD)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '"""\nTITLE: Intersection 06\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle makes a right turn at 4-way intersection while \nadversary vehicle from lateral lane goes straight.\nSOURCE: NHSTA, #25 #26\n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town05.xodr')\nparam carla_map = 'Town05'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nEGO_INIT_DIST = [20, 25]\nparam EGO_SPEED = VerifaiRange(7, 10)\nparam EGO_BRAKE = VerifaiRange(0.5, 1.0)\n\nADV_INIT_DIST = [10, 15]\nparam ADV_SPEED = VerifaiRange(7, 10)\n\nparam SAFETY_DIST = VerifaiRange(10, 20)\nCRASH_DIST = 5\nTERM_DIST = 70\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior(trajectory):\n    try:\n        do FollowTrajectoryBehavior(target_speed=globalParameters.EGO_SPEED, trajectory=trajectory)\n    interrupt when withinDistanceToAnyObjs(self, globalParameters.SAFETY_DIST):\n        take SetBrakeAction(globalParameters.EGO_BRAKE)\n    interrupt when withinDistanceToAnyObjs(self, CRASH_DIST):\n        terminate\n\n', 'spatial_relations': '\nintersection = Uniform(*filter(lambda i: i.is4Way, network.intersections))\n\negoInitLane = Uniform(*intersection.incomingLanes)\negoManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.RIGHT_TURN, egoInitLane.maneuvers))\negoTrajectory = [egoInitLane, egoManeuver.connectingLane, egoManeuver.endLane]\negoSpawnPt = new OrientedPoint in egoInitLane.centerline\n\nadvInitLane = Uniform(*filter(lambda m:\n        m.type is ManeuverType.STRAIGHT,\n        Uniform(*filter(lambda m: \n            m.type is ManeuverType.STRAIGHT, \n            egoInitLane.maneuvers)\n        ).conflictingManeuvers)\n    ).startLane\nadvManeuver = Uniform(*filter(lambda m: m.type is ManeuverType.STRAIGHT, advInitLane.maneuvers))\nadvTrajectory = [advInitLane, advManeuver.connectingLane, advManeuver.endLane]\nadvSpawnPt = new OrientedPoint in advInitLane.centerline\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior(egoTrajectory)\n\nadversary = new Car at advSpawnPt,\n    with blueprint MODEL,\n    with behavior FollowTrajectoryBehavior(target_speed=globalParameters.ADV_SPEED, trajectory=advTrajectory)\n\nrequire EGO_INIT_DIST[0] <= (distance to intersection) <= EGO_INIT_DIST[1]\nrequire ADV_INIT_DIST[0] <= (distance from adversary to intersection) <= ADV_INIT_DIST[1]\nterminate when (distance to egoSpawnPt) > TERM_DIST\n'}, {'docstring': '""" Scenario Description\nVoyage OAS Scenario Unique ID: 2-2-XX-CF-STR-CAR:Pa>E:03\nThe car ahead of ego that is badly parked over the sidewalk cuts into ego vehicle\'s lane.\nThis scenario may fail if there exists any obstacle (e.g. fences) on the sidewalk \n"""', 'map_and_model': "\nparam map = localPath('../../../assets/maps/CARLA/Town01.xodr')  # or other CARLA map that definitely works\nparam carla_map = 'Town01'\nmodel scenic.domains.driving.model\n\n", 'constants': '\nMAX_BREAK_THRESHOLD = 1\nSAFETY_DISTANCE = 8\nPARKING_SIDEWALK_OFFSET_RANGE = 2\nCUT_IN_TRIGGER_DISTANCE = Range(10, 12)\nEGO_SPEED = 8\nPARKEDCAR_SPEED = 7\n\n', 'monitors': None, 'behaviors': '\nbehavior CutInBehavior(laneToFollow, target_speed):\n    while (distance from self to ego) > CUT_IN_TRIGGER_DISTANCE:\n        wait\n\n    do FollowLaneBehavior(laneToFollow = laneToFollow, target_speed=target_speed)\n\nbehavior CollisionAvoidance():\n    while withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        take SetBrakeAction(MAX_BREAK_THRESHOLD)\n\nbehavior EgoBehavior(target_speed):\n    try: \n        do FollowLaneBehavior(target_speed=target_speed)\n\n    interrupt when withinDistanceToAnyObjs(self, SAFETY_DISTANCE):\n        do CollisionAvoidance()\n\n', 'spatial_relations': '\nroads = network.roads\nselect_road = Uniform(*roads)\nego_lane = select_road.lanes[0]\n\n', 'scenario': '\nego = new Car on ego_lane.centerline,\n        with behavior EgoBehavior(target_speed=EGO_SPEED)\n        \nspot = new OrientedPoint on visible curb\nparkedHeadingAngle = Uniform(-1,1)*Range(10,20) deg\n\nother = new Car left of (spot offset by PARKING_SIDEWALK_OFFSET_RANGE @ 0), facing parkedHeadingAngle relative to ego.heading,\n            with behavior CutInBehavior(ego_lane, target_speed=PARKEDCAR_SPEED),\n            with regionContainedIn None\n\nrequire (angle from ego to other) - ego.heading < 0 deg\nrequire 10 < (distance from ego to other) < 20\n'}, {'docstring': '"""\nTITLE: Bypassing 04\nAUTHOR: Francis Indaheng, findaheng@berkeley.edu\nDESCRIPTION: Ego vehicle performs multiple lane changes to bypass \ntwo slow adversary vehicles.\nSOURCE: NHSTA, #16\n"""', 'map_and_model': "\nparam map = localPath('../../../../assets/maps/CARLA/Town03.xodr')\nparam carla_map = 'Town03'\nmodel scenic.simulators.carla.model\n\n", 'constants': "\nMODEL = 'vehicle.lincoln.mkz_2017'\n\nparam EGO_SPEED = VerifaiRange(6, 8)\n\nparam ADV1_DIST = VerifaiRange(20, 25)\nparam ADV2_DIST = globalParameters.ADV1_DIST + VerifaiRange(15, 20)\nparam ADV_SPEED = VerifaiRange(2, 4)\n\nBYPASS_DIST = 15\nINIT_DIST = 50\nTERM_DIST = globalParameters.ADV2_DIST + 15\n\n", 'monitors': None, 'behaviors': '\nbehavior EgoBehavior():\n    try:\n        do FollowLaneBehavior(target_speed=globalParameters.EGO_SPEED)\n    interrupt when (distance to adversary_1) < BYPASS_DIST:\n        newLaneSec = self.laneSection.laneToRight\n        do LaneChangeBehavior(\n            laneSectionToSwitch=newLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n    interrupt when (distance to adversary_2) < BYPASS_DIST:\n        newLaneSec = self.laneSection.laneToLeft\n        do LaneChangeBehavior(\n            laneSectionToSwitch=newLaneSec,\n            target_speed=globalParameters.EGO_SPEED)\n\nbehavior Adversary2Behavior():\n    rightLaneSec = self.laneSection.laneToRight\n    do LaneChangeBehavior(\n        laneSectionToSwitch=rightLaneSec,\n        target_speed=globalParameters.ADV_SPEED)\n    do FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\n', 'spatial_relations': '\ninitLane = Uniform(*filter(lambda lane:\n    all([sec._laneToRight is not None for sec in lane.sections]),\n    network.lanes))\negoSpawnPt = new OrientedPoint in initLane.centerline\negoLaneSecToSwitch = initLane.sectionAt(egoSpawnPt).laneToRight\n\n', 'scenario': '\nego = new Car at egoSpawnPt,\n    with blueprint MODEL,\n    with behavior EgoBehavior()\n\nadversary_1 = new Car following roadDirection for globalParameters.ADV1_DIST,\n    with blueprint MODEL,\n    with behavior FollowLaneBehavior(target_speed=globalParameters.ADV_SPEED)\n\nadversary_2 = new Car following roadDirection for globalParameters.ADV2_DIST,\n    with blueprint MODEL,\n    with behavior Adversary2Behavior()\n\nrequire (distance to intersection) > INIT_DIST\nrequire (distance from adversary_1 to intersection) > INIT_DIST\nrequire (distance from adversary_2 to intersection) > INIT_DIST\nterminate when (distance to adversary_2) > TERM_DIST\n'}]
